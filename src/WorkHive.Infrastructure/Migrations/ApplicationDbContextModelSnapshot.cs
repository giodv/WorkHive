// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkHive.Infrastructure.Persistence;

#nullable disable

namespace WorkHive.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WHEventWHUser", b =>
                {
                    b.Property<Guid>("GuestEventsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuestsId")
                        .HasColumnType("uuid");

                    b.HasKey("GuestEventsId", "GuestsId");

                    b.HasIndex("GuestsId");

                    b.ToTable("WHEventWHUser");
                });

            modelBuilder.Entity("WorkHive.Domain.Entities.WHCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WhCompanies");
                });

            modelBuilder.Entity("WorkHive.Domain.Entities.WHEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EventAttributes")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationAttributes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MaxGuest")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("WHEvents");
                });

            modelBuilder.Entity("WorkHive.Domain.Entities.WHUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WhCompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WhCompanyId");

                    b.ToTable("WhUsers");
                });

            modelBuilder.Entity("WHEventWHUser", b =>
                {
                    b.HasOne("WorkHive.Domain.Entities.WHEvent", null)
                        .WithMany()
                        .HasForeignKey("GuestEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkHive.Domain.Entities.WHUser", null)
                        .WithMany()
                        .HasForeignKey("GuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkHive.Domain.Entities.WHEvent", b =>
                {
                    b.HasOne("WorkHive.Domain.Entities.WHUser", "Owner")
                        .WithMany("OwnerEvents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WorkHive.Domain.Entities.WHUser", b =>
                {
                    b.HasOne("WorkHive.Domain.Entities.WHCompany", "WhCompany")
                        .WithMany("Users")
                        .HasForeignKey("WhCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhCompany");
                });

            modelBuilder.Entity("WorkHive.Domain.Entities.WHCompany", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkHive.Domain.Entities.WHUser", b =>
                {
                    b.Navigation("OwnerEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
